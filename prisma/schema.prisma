
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
}
model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  fullName      String
  email         String         @unique
  password      String
  avatar        String         @default("https://utfs.io/f/17e4ff26-ae1f-4a19-a2aa-b9384a47c942-bim04p.jpg")
  accounts      Account[]
  role          ROLE           @default(USER)

  fullAddress   String?
  phoneNumber   String?



  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts Cart[]
  orders Order[]
  notifications Notification[]
  productReviews ProductReview[]
  userBoughtProducts UserBoughtProduct[]
  userAddresses UserAddress[]
}

model UserAddress {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  addressName String
  fullAddress     String

  user User @relation(fields: [userId], references: [id])
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

 
  @@unique([provider, providerAccountId])
}

enum CATEGORY {
  COLLARSANDLEASHES
  TOYS
  APPAREL
  BEDDING
  FOODANDBOWLS
  TRAVELACCESSORIES
  GROOMING
  HEALTHANDWELLNESS
  TRAININGAIDS
  IDTAGS
}
model Product {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Int
  image       String
  stock       Int
  sold        Int
  category     CATEGORY

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  carts CartProduct[]
  orders OrderItems[]
  reviews ProductReview[]
  userBoughtProducts UserBoughtProduct[]
}

model ProductReview {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  productId   String  @db.ObjectId
  userId      String  @db.ObjectId
  comment     String
  rating      Int

  product Product @relation(fields: [productId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
}

model UserBoughtProduct {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  productId   String  @db.ObjectId
  userId      String  @db.ObjectId

  product Product @relation(fields: [productId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
}

// one to one relationship, user can have only one cart
model Cart {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId

  user User @relation(fields: [userId], references: [id])

  items CartProduct[]
}

model CartProduct {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId      String  @db.ObjectId
  productId   String  @db.ObjectId
  quantity    Int

  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

enum ORDERSTATUS {
  PENDING
  INTRANSIT
  DELIVERED
}
model Order {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  status      ORDERSTATUS @default(PENDING)
  paypalOrderId String?
  total       Int
  address     String

  user User @relation(fields: [userId], references: [id])

  items OrderItems[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model OrderItems {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String  @db.ObjectId
  productId   String  @db.ObjectId
  quantity    Int

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

// enum NOTIFCOLOR {
//   INFO
//   SUCCESS
//   DANGER
//   WARNING
// }


enum NotificationType {
  NEW_ORDER
  ORDER_INTRANSIT
  ORDER_DELIVERED

  NEW_REVIEW
}



model Notification {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  title       String 
  content     String
  contentId   String
  read        Boolean @default(false)
  type        NotificationType

  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}